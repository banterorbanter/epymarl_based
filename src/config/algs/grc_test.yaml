# --- GRC specific parameters ---

# use epsilon greedy action selector
action_selector: "epsilon_greedy"
epsilon_start: 1.0
epsilon_finish: 0.05
epsilon_anneal_time: 100000
evaluation_epsilon: 0.0

runner: "parallel"
batch_size_run: 2
#runner: "episode"
#batch_size_run: 1
buffer_cpu_only: True # If true we won't keep all of the replay buffer in vram

batch_size: 16
buffer_size: 64

# update the target network every {} episodes
target_update_interval_or_tau: 200

obs_agent_id: True
obs_last_action: False
obs_individual_obs: False


# use the Q_Learner to train
standardise_returns: False
standardise_rewards: True

agent_output_type: "q"
learner: "grc_learner"
double_q: True
mixer: "qmix"
use_rnn: True
mixing_embed_dim: 32
hypernet_layers: 2
hypernet_embed: 64

# grc param
name: "graph_reconstruction"
mac: "grc_mac"
agent: "grc"
message_missing_type: "uniform"  # structural or uniform
message_missing_rate: 0.5
message_dim: 32
node_feature_dim: 32

save_model: True # Save the models to disk
save_model_interval: 100000 # Save models after this many timesteps

use_tensorboard: True # Log results to tensorboard

lr: 0.001
test_nepisode: 32
test_interval: 10000
log_interval: 10000
runner_log_interval: 10000
learner_log_interval: 10000
t_max: 3050000
